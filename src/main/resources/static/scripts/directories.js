const API_BASE = 'http://localhost:8080/directory/get';
const API_CREATE = 'http://localhost:8080/directory/create';

let currentPath = '.'; // –ë—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
document.addEventListener('DOMContentLoaded', () => {
    loadDirectory('.');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    document.getElementById('createDirBtn').addEventListener('click', showCreateDirInput);
    document.getElementById('createDirInput').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            createDirectory(this.value);
            this.value = '';
            this.style.display = 'none';
        }
    });

    // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
    document.getElementById('createDirInput').addEventListener('blur', function() {
        this.style.display = 'none';
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç"
    document.getElementById('createTestBtn').addEventListener('click', function() {
        // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä URL
        window.location.href = `../create_test/create_test.html?path=${encodeURIComponent(currentPath)}`;
    });
});

async function loadDirectory(path) {
    try {
        currentPath = path; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å

        const encodedPath = encodeURIComponent(path);
        const response = await fetch(`${API_BASE}?path=${encodedPath}`);

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();

        updateBreadcrumbs(data.path);
        renderContent(data.children, data.path);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
        document.getElementById('content').innerHTML = '<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + error.message + '</div>';
    }
}

function updateBreadcrumbs(currentPath) {
    const breadcrumb = document.getElementById('breadcrumb');

    // –†–∞–∑–±–∏–≤–∞–µ–º –ø—É—Ç—å –Ω–∞ —á–∞—Å—Ç–∏
    const parts = currentPath.split('/').filter(p => p !== '' && p !== '.');

    let breadcrumbHTML = '<a onclick="loadDirectory(\'.\')">–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è</a>';
    let accumulatedPath = '.';

    // –°—Ç—Ä–æ–∏–º —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏
    parts.forEach(part => {
        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
        accumulatedPath = accumulatedPath === '.' ? `./${part}` : `${accumulatedPath}/${part}`;
        breadcrumbHTML += ` / <a onclick="loadDirectory('${accumulatedPath}')">${part}</a>`;
    });

    breadcrumb.innerHTML = breadcrumbHTML;
}

function renderContent(children, currentPath) {
    const content = document.getElementById('content');

    // –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    let contentHTML = '';

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é "..." –µ—Å–ª–∏ –º—ã –Ω–µ –≤ –∫–æ—Ä–Ω–µ
    if (currentPath !== '.') {
        const parentPath = getParentPath(currentPath);
        contentHTML += `<div class="parent-directory" onclick="loadDirectory('${parentPath}')">üìÅ ...</div>`;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if (children.length === 0) {
        // –ï—Å–ª–∏ –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        contentHTML += '<div class="empty-dir">–ü—É—Å—Ç–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è</div>';
    } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        contentHTML += children.map(item => {
            // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —ç–ª–µ–º–µ–Ω—Ç—É
            const itemPath = currentPath === '.' ? `./${item.name}` : `${currentPath}/${item.name}`;

            if (item.directory) {
                // –î–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π - –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
                return `<div class="directory" onclick="loadDirectory('${itemPath}')">üìÅ ${item.name}</div>`;
            } else {
                // –î–ª—è —Ñ–∞–π–ª–æ–≤ - –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                return `<div class="file">üìÑ ${item.name}</div>`;
            }
        }).join('');
    }

    content.innerHTML = contentHTML;
}

function getParentPath(currentPath) {
    // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å - –∫–æ—Ä–Ω–µ–≤–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –∂–µ
    if (currentPath === '.') {
        return '.';
    }

    // –†–∞–∑–±–∏–≤–∞–µ–º –ø—É—Ç—å –Ω–∞ —á–∞—Å—Ç–∏
    const parts = currentPath.split('/').filter(p => p !== '' && p !== '.');

    // –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
    parts.pop();

    // –ï—Å–ª–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    if (parts.length === 0) {
        return '.';
    }

    // –°–æ–±–∏—Ä–∞–µ–º –ø—É—Ç—å –æ–±—Ä–∞—Ç–Ω–æ
    return './' + parts.join('/');
}

function showCreateDirInput() {
    const input = document.getElementById('createDirInput');
    input.style.display = 'inline-block';
    input.focus();
}

async function createDirectory(dirName) {
    if (!dirName.trim()) {
        return; // –ù–µ —Å–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –ø—É—Å—Ç—ã–º –∏–º–µ–Ω–µ–º
    }

    try {
        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –Ω–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        const newDirPath = currentPath === '.' ? `./${dirName}` : `${currentPath}/${dirName}`;

        const response = await fetch(API_CREATE, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                path: newDirPath
            })
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
        loadDirectory(currentPath);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ' + error.message);
    }
}